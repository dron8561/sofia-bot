import os
import sqlite3
import time
from flask import Flask, request, jsonify
import requests
from openai import OpenAI
import os
from bad_words import BAD_WORDS

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
# –í–ê–ñ–ù–û: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–π –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏—Ö –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ (Render).
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
BOT_NAME = "–°–æ—Ñ–∏—è"
PORT = int(os.environ.get("PORT", 8000))

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_TOKEN –∏ OPENAI_API_KEY. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

tg_api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === Flask ===
app = Flask(__name__)

# === SQLite –±–∞–∑–∞ –ø–∞–º—è—Ç–∏ ===
DB_PATH = "memory.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS chats (
    user_id INTEGER,
    role TEXT,
    content TEXT,
    ts INTEGER
)
""")
conn.commit()

def append_memory(user_id: int, role: str, content: str):
    cur.execute("INSERT INTO chats (user_id, role, content, ts) VALUES (?, ?, ?, ?)",
                (user_id, role, content, int(time.time())))
    conn.commit()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    cur.execute("DELETE FROM chats WHERE rowid IN (SELECT rowid FROM chats WHERE user_id=? ORDER BY ts DESC LIMIT -1 OFFSET 20)", (user_id,))
    conn.commit()

def get_history(user_id: int):
    cur.execute("SELECT role, content FROM chats WHERE user_id=? ORDER BY ts ASC", (user_id,))
    rows = cur.fetchall()
    return [{"role": r[0], "content": r[1]} for r in rows]

def telegram_send(chat_id: int, text: str):
    url = f"{tg_api}/sendMessage"
    requests.post(url, json={"chat_id": chat_id, "text": text})

# === –õ–∏—á–Ω–æ—Å—Ç—å –°–æ—Ñ–∏–∏ ===
SYSTEM_PROMPT = (
    f"–¢—ã ‚Äî {BOT_NAME}, –º–∏–ª–∞—è, —Ñ–ª–∏—Ä—Ç—É—é—â–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞. "
    "–ì–æ–≤–æ—Ä–∏—à—å –ª–µ–≥–∫–æ, —Å —Ç–µ–ø–ª–æ–º –∏ —É–ª—ã–±–∫–æ–π. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤–æ, –Ω–æ –±–µ–∑ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ—Å—Ç–µ–π. "
    "–ò–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ç–µ–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤ –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å üíñ"
)

# === Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    if "message" not in data:
        return jsonify({"ok": True})

    msg = data["message"]
    chat_id = msg["chat"]["id"]
    user_id = msg["from"]["id"]
    text = msg.get("text", "").strip()

    if not text:
        telegram_send(chat_id, "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç üí¨")
        return jsonify({"ok": True})

    # —Ñ–∏–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã—Ö —Å–ª–æ–≤
    if any(bad in text.lower() for bad in BAD_WORDS):
        reply = "–î–∞–≤–∞–π –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ –¥–ª—è —Ñ–∞–Ω—Ç–∞–∑–∏–π üòâ –õ—É—á—à–µ —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
        telegram_send(chat_id, reply)
        append_memory(user_id, "assistant", reply)
        return jsonify({"ok": True})

    append_memory(user_id, "user", text)
    history = get_history(user_id)
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + history
    messages.append({"role": "user", "content": text})

    try:
        resp = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=400,
            temperature=0.9
        )
        answer = resp.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenAI:", e)
        answer = "–ö–∞–∂–µ—Ç—Å—è, —è —á—É—Ç—å –∑–∞–¥—É–º–∞–ª–∞—Å—å üòÖ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."

    append_memory(user_id, "assistant", answer)
    telegram_send(chat_id, answer)
    return jsonify({"ok": True})

@app.route("/", methods=["GET"])
def home():
    return f"{BOT_NAME} –∞–∫—Ç–∏–≤–Ω–∞ üå∏"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
