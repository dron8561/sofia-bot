import os
import time
import threading
import sqlite3
from flask import Flask, request, jsonify
import requests
from openai import OpenAI
from bad_words import BAD_WORDS

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
BOT_NAME = "–°–æ—Ñ–∏—è"
PORT = int(os.environ.get("PORT", 8000))

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_TOKEN –∏ OPENAI_API_KEY. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

tg_api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
client = OpenAI(api_key=OPENAI_API_KEY)

# === Flask ===
app = Flask(__name__)

# === SQLite –±–∞–∑–∞ –ø–∞–º—è—Ç–∏ —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é ===
DB_PATH = "memory.db"
db_lock = threading.Lock()

def init_db():
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("""
        CREATE TABLE IF NOT EXISTS chats (
            user_id INTEGER,
            role TEXT,
            content TEXT,
            ts INTEGER
        )
        """)
        conn.commit()
        conn.close()

init_db()

def append_memory(user_id: int, role: str, content: str):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO chats (user_id, role, content, ts) VALUES (?, ?, ?, ?)",
            (user_id, role, content, int(time.time()))
        )
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        cur.execute(
            "DELETE FROM chats WHERE rowid IN "
            "(SELECT rowid FROM chats WHERE user_id=? ORDER BY ts DESC LIMIT -1 OFFSET 20)",
            (user_id,)
        )
        conn.commit()
        conn.close()

def get_history(user_id: int):
    with db_lock:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("SELECT role, content FROM chats WHERE user_id=? ORDER BY ts ASC", (user_id,))
        rows = cur.fetchall()
        conn.close()
    return [{"role": r[0], "content": r[1]} for r in rows]

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ===
def telegram_send(chat_id: int, text: str):
    url = f"{tg_api}/sendMessage"
    try:
        response = requests.post(url, json={"chat_id": chat_id, "text": text}, timeout=5)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code}, {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# === –õ–∏—á–Ω–æ—Å—Ç—å –°–æ—Ñ–∏–∏ ===
SYSTEM_PROMPT = (
    f"–¢—ã ‚Äî {BOT_NAME}, –º–∏–ª–∞—è, —Ñ–ª–∏—Ä—Ç—É—é—â–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞. "
    "–ì–æ–≤–æ—Ä–∏—à—å –ª–µ–≥–∫–æ, —Å —Ç–µ–ø–ª–æ–º –∏ —É–ª—ã–±–∫–æ–π. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤–æ, –Ω–æ –±–µ–∑ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ—Å—Ç–µ–π. "
    "–ò–∑–±–µ–≥–∞–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ç–µ–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤ –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å üíñ"
)

# === Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    if "message" not in data:
        return jsonify({"ok": True})

    msg = data["message"]
    chat_id = msg["chat"]["id"]
    user_id = msg["from"]["id"]
    text = msg.get("text", "").strip()

    if not text:
        telegram_send(chat_id, "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç üí¨")
        return jsonify({"ok": True})

    # —Ñ–∏–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã—Ö —Å–ª–æ–≤
    if any(bad in text.lower() for bad in BAD_WORDS):
        reply = "–î–∞–≤–∞–π –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ –¥–ª—è —Ñ–∞–Ω—Ç–∞–∑–∏–π üòâ –õ—É—á—à–µ —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
        telegram_send(chat_id, reply)
        append_memory(user_id, "assistant", reply)
        return jsonify({"ok": True})

    append_memory(user_id, "user", text)
    history = get_history(user_id)

    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + history + [{"role": "user", "content": text}]

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenAI:", e)
        answer = "–ö–∞–∂–µ—Ç—Å—è, —è —á—É—Ç—å –∑–∞–¥—É–º–∞–ª–∞—Å—å üòÖ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."

    append_memory(user_id, "assistant", answer)
    telegram_send(chat_id, answer)
    return jsonify({"ok": True})

@app.route("/", methods=["GET"])
def home():
    return f"{BOT_NAME} –∞–∫—Ç–∏–≤–Ω–∞ üå∏"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
